#!/bin/bash
set -Eeuo pipefail

dir="$(realpath .)"
# when MUSIC_DIR is set in the environment 
if  [ ! -z $MUSIC_DIR ] ; then
    # and the current directory is not inside MUSIC_DIR
    if [[ ! "$dir" = "$(realpath $MUSIC_DIR)"* ]]; then    
        # switch to MUSIC_DIR
        cd $MUSIC_DIR
    fi
fi

# parse cli args
vlc_args=""
help_shown=false
list_only=false
sorted=false
args=( "$@" )
while [ ${#args[@]} -gt 0 ]; do
    arg="${args[0]}"
    if [[ "$arg" == -[!-][a-zA-z]* ]]; then
        targ=${arg[@]:2}
        arg="${arg[@]:0:2}"
        targs=( "$arg" )
        while [ "$targ" != "" ]; do
            targs=( "${targs[@]}" "-${targ[@]:0:1}" )
            targ="${targ[@]:1}"
        done
        args=( "${targs[@]}" "${args[@]:1}")
    fi
    if [ "$arg" = "-h" ] || [ "$arg" = "--help" ]; then
        help_shown=true
        #display help
        cat <<________EOF
play [-hansc] [FILES...] [DIRS...] [PATTERNS...]

    Play all FILES, in DIRS contained files and files whose relative path
    from the current directory matches PATTERNS in the VLC Media Player.

    When the environment sets MUSIC_DIR and the current dir is not in it,
    the script changes directory to MUSIC_DIR.

    When no args are passed, play everything contained in current directory.

    -h | --help    : show this help
    -a | --append  : instead of playing the songs, append them to the playlist
    -n | --dry-run : don't play, just print out the results to stdout
    -s | --sort    : play in sorted order (default is random) 
    -c | --clear   : clear the playlist beforehand 
________EOF
        shift
    elif [ "$arg" = "-a" ] || [ "$arg" = "--append" ]; then
        vlc_args="--playlist-enqueue"
    elif [ "$arg" = "-n" ] || [ "$arg" = "--dry-run" ]; then
        list_only=true
    elif [ "$arg" = "-s" ] || [ "$arg" = "--sort" ]; then
        sorted=true
    elif [ "$arg" = "-c" ] || [ "$arg" = "--clear" ]; then
        #without the sleep sometimes vlc doesn't start back up :/
        #TODO: proper fix for this
        (killall vlc 2>/dev/null && sleep 0.1) || : 
    elif [ "$arg" = "--" ]; then
        break
    elif [[ "$arg" == -* ]]; then
        echo "unknown option '$arg'"
        exit -1
    else
        break
    fi
    args=( "${args[@]:1}" )
done

music_regex='^.*\.\(mp3\)\|\(opus\)\|(m4a)\|(ogg)$'
if $list_only; then
    shell_cmd="grep '$music_regex'"
else
    shell_cmd="grep '$music_regex' | xargs -d \\\\n vlc $vlc_args 2>/dev/null &"
fi

if $sorted; then
    ordering_cmd="sort -V"
else
    ordering_cmd="shuf"
fi


if [ ${#args[@]} -eq 0 ] && ! $help_shown; then
    #play everything in folder
    find . -type f | bash -c "$shell_cmd"
else 
    #play every file, everything in folder and everything matching pattern
    cat <(
        for arg in "${args[@]}"; do
            if [ -d "$arg" ]; then
                find "$arg" -type f
            elif [ -f "$dir/$arg" ]; then
                echo "$dir/$arg"
            elif [ -f "$arg" ]; then
                echo "./$arg"
            else
                find . -type f | grep -i -- "$arg"
            fi
        done
    ) | bash -c "$ordering_cmd | $shell_cmd"
fi
