#!/bin/bash
set -Eeuo pipefail

dir="$(realpath .)"
music_dir="$dir"
search_dir="$dir"
# when PLAY_MUSIC_DIR is set in the environment ...
if  [ -v PLAY_MUSIC_DIR ] ; then
    music_dir="$PLAY_MUSIC_DIR"
    # ... and the current directory is not inside MUSIC_DIR
    if [[ ! "$dir" = "$(realpath $music_dir)"* ]]; then
        # regex search relative to music dir
        search_dir="$music_dir"
    fi
fi

telnet=false
if [ -v PLAY_VLC_TELNET_PORT ]; then
    telnet=true
    telnet_port="$PLAY_VLC_TELNET_PORT"
    if [ -v PLAY_VLC_TELNET_PW ]; then
        telnet_pw="$PLAY_VLC_TELNET_PW"
    else
        telnet_pw=""
    fi
fi

# parse cli args
help_shown=false
list_only=false
append=false
read_paths_from_file=""
sorted=false
args=( "$@" )
while [ ${#args[@]} -gt 0 ]; do
    arg="${args[0]}"
    if [[ "$arg" == -[!-][a-zA-z]* ]]; then
        targ=${arg[@]:2}
        arg="${arg[@]:0:2}"
        targs=( "$arg" )
        while [ "$targ" != "" ]; do
            targs=( "${targs[@]}" "-${targ[@]:0:1}" )
            targ="${targ[@]:1}"
        done
        args=( "${targs[@]}" "${args[@]:1}")
    fi
    if [ "$arg" = "-h" ] || [ "$arg" = "--help" ]; then
        help_shown=true
        #display help
        cat <<________EOF
play [-f FILE] [-hansc] [PATTERNS...]
    Play all PATTERNS in VLC Media Player. 
    Patterns matching a filename play that file.
    Patterns matching a directory recursively play all songs in that directory.
    Any other patterns are interpreted as a regex for a file search.

    When the environment sets MUSIC_DIR, that directory is used for 
    regex searches and also checked for file / directory maches.

    Calling play with no PATTERNS / FILE is equivalent to play *.

    -h | --help    : show this help
    -a | --append  : instead of playing the songs, append them to the playlist
    -n | --dry-run : don't play, just print out the results to stdout
    -s | --sort    : play in sorted order (default is random) 
    -f | --file    : read additional PATTERNS from FILE
    -c | --clear   : clear the playlist beforehand 
________EOF
        shift
    elif [ "$arg" = "-a" ] || [ "$arg" = "--append" ]; then
        append=true
    elif [ "$arg" = "-n" ] || [ "$arg" = "--dry-run" ]; then
        list_only=true
    elif [ "$arg" = "-s" ] || [ "$arg" = "--sort" ]; then
        sorted=true
    elif [ "$arg" = "-f" ] || [ "$arg" = "--file" ]; then
        args=( "${args[@]:1}" )
        f="${args[0]}"
        if [ "$f" == "-" ]; then
            f="/dev/stdin"
        elif [ ! -f "$f" ]; then
            echo "cannot access file '$f'" 1>&2
            exit -1
        fi
        while read line; do
            args=( "${args[@]}" "$line" )
        done < $f
    elif [ "$arg" = "-c" ] || [ "$arg" = "--clear" ]; then
        #without the sleep sometimes vlc doesn't start back up :/
        #TODO: proper fix for this
        (killall vlc 2>/dev/null && sleep 0.1) || : 
    elif [ "$arg" = "--" ]; then
        break
    elif [[ "$arg" == -* ]]; then
        echo "unknown option '$arg'"
        exit -1
    else
        break
    fi
    args=( "${args[@]:1}" )
done

music_regex='^.*\.\(mp3\)\|\(opus\)\|(m4a)\|(ogg)$'
if $list_only; then
    shell_cmd="grep '$music_regex' | xargs -d\\\\n -n 1 -I@ realpath --relative-to='.' @"
else
    if $telnet; then
        vlc --one-instance -I qt --extraintf telnet --telnet-host 127.0.0.1 --telnet-port $telnet_port --telnet-password $telnet_pw 2>/dev/null &
        nc_cmd="nc -q 0 127.0.0.1 $telnet_port >/dev/null"
        if $append; then
            shell_cmd="(echo '$telnet_pw' && grep '$music_regex' | sed \"s/.*/enqueue &/\" && printf 'quit\n\n') | $nc_cmd" 
        else
            shell_cmd="(echo '$telnet_pw' && grep '$music_regex' | (read first && echo \"add \$first\" && sed \"s/.*/enqueue &/\") && printf 'quit\n\n') | $nc_cmd" 
        fi
    else
        if $append; then
            shell_cmd="grep '$music_regex' | xargs -d \\\\n vlc --playlist-enque 2>/dev/null"
        else
            shell_cmd="grep '$music_regex' | (read first && vlc \"\$first\" 2>/dev/null && xargs -d \\\\n vlc --playlist-enque 2>/dev/null)"
        fi
    fi

fi

if $sorted; then
    ordering_cmd="sort -V"
else
    ordering_cmd="shuf"
fi

if [ ${#args[@]} -eq 0 ] && ! $help_shown; then
    #play everything in folder
    find "$music_dir" -type f | bash -c "$shell_cmd"
else 
    #play every file, everything in folder and everything matching pattern
    cat <(
        for arg in "${args[@]}"; do
            if [ -f "$arg" ]; then
                echo "$arg"
            elif [ -d "$arg" ]; then
                find "$arg" -type f
            elif [ -f "$music_dir/$arg" ]; then
                echo "$music_dir/$arg"
            elif [ -d "$music_dir/$arg" ]; then
                find "$music_dir/$arg" -type f
            else
                find "$search_dir" -type f | grep -i -- "$arg"
            fi
        done
    ) | bash -c "$ordering_cmd | $shell_cmd"
fi
